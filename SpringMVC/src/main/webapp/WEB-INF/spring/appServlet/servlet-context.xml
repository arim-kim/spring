<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- spring mvc에서 특화된 명령어 (annotation 기반으로 설정하라는 의미임) -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- **(2개면 하위폴더 전부를 의미/ 하나라면 하위폴더 하나만 의미함) -->
	<!-- static contents는 resources에서 관리함 (static html,css,js,image를 관리함) -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->


	<!-- View resolver -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- home이라는 문자열을 view resolver에 던지면, 앞에 prefix, 뒤에 suffix를 붙여줌 => jsp를 
			찾으면 된다고 디스패쳐 서블릿에게 알려주고 포워딩해줌 -->

		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- @Controller 붙은 것을 다 찾음. spring 자료구조를 만들어서(Handler mapping 과정)전부 기록해놓고. -->
	<!-- 디스패쳐 서블렛이 그 자료구조를 가지고 url(요청)이 들어오면 매칭시켜서 호출해줌 -->
	<context:component-scan
		base-package="com.mycom.myapp" />



</beans:beans>
